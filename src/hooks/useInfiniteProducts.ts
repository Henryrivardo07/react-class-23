import { useInfiniteQuery } from '@tanstack/react-query'; // ðŸ”¥ Import React Query untuk infinite scrolling
import axios from 'axios';

const API_URL = 'https://fakestoreapi.com/products';

/** âœ… Fungsi untuk mengambil data produk dengan pagination */
const fetchProducts = async ({ pageParam = 1 }: { pageParam?: number }) => {
  const response = await axios.get(`${API_URL}?_page=${pageParam}&_limit=10`);
  return response.data ?? []; // ðŸ”¥ Pastikan mengembalikan array, agar tidak return undefined/null
};

export const useInfiniteProducts = () => {
  /** âœ… Menggunakan useInfiniteQuery untuk fetching data */
  const {
    data, // Data hasil fetching (terbagi dalam pages)
    fetchNextPage, // Fungsi untuk mengambil halaman berikutnya
    hasNextPage, // Boolean: apakah masih ada halaman selanjutnya?
    isFetchingNextPage, // Boolean: apakah sedang mengambil halaman berikutnya?
    isLoading, // Boolean: apakah data sedang dimuat?
    error, // Jika ada error
  } = useInfiniteQuery({
    queryKey: ['products'], // ðŸ”¥ Key unik untuk cache query
    queryFn: fetchProducts, // ðŸ”¥ Fungsi pengambilan data
    initialPageParam: 1, // ðŸ”¥ Halaman awal adalah 1
    getNextPageParam: (lastPage, allPages) => {
      if (!lastPage || !Array.isArray(lastPage) || lastPage.length < 10)
        return null; // ðŸ”¥ Jika data kurang dari 10 item, hentikan pagination
      return allPages.length + 1; // ðŸ”¥ Ambil halaman berikutnya berdasarkan jumlah halaman yang ada
    },
  });

  return {
    products: data?.pages?.flat() ?? [], // ðŸ”¥ Menggabungkan semua pages jadi satu array (flattening)
    fetchNextPage, // ðŸ”¥ Fungsi untuk mengambil halaman berikutnya
    hasNextPage: hasNextPage ?? false, // ðŸ”¥ Boolean apakah masih ada data?
    isFetchingNextPage, // ðŸ”¥ Apakah sedang memuat data berikutnya?
    isLoading, // ðŸ”¥ Apakah data awal sedang dimuat?
    error, // ðŸ”¥ Error jika ada
  };
};
